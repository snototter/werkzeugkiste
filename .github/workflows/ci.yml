name: ci

on:
  workflow_dispatch:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

jobs:
  lint:
    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Install codespell
      run: pip3 install codespell

    - name: Lint
      run: cmake -D FORMAT_COMMAND=clang-format-14 -P cmake/lint.cmake

    - name: Spell check
      if: always()
      run: cmake -P cmake/spell.cmake

  coverage:
    needs: [lint]

    runs-on: ubuntu-22.04

    if: github.repository_owner == 'snototter'

    steps:
    - uses: actions/checkout@v3

    - name: Install GoogleTest libraries
      uses: MarkusJx/googletest-installer@v1.1.1

    - name: Install werkzeugkiste requirements
      run: sudo apt-get install libeigen3-dev libconfig++-dev -q -y

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build/coverage -j 2

    - name: Test
      working-directory: build/coverage
      run: ctest --output-on-failure -j 2

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

    - name: Update coveralls.io
      uses: coverallsapp/github-action@v2.0.0
      with:
        github-token: ${{ github.token }}
        file: build/coverage/coverage.info
        format: lcov

  sanitize:
    needs: [lint]

    runs-on: ubuntu-22.04

    steps:
    - uses: actions/checkout@v3

    - name: Install GoogleTest libraries
      uses: MarkusJx/googletest-installer@v1.1.1

    - name: Install werkzeugkiste requirements
      run: sudo apt-get install libeigen3-dev libconfig++-dev -q -y

    - name: Configure
      env: { CXX: clang++-14 }
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1"
        UBSAN_OPTIONS: print_stacktrace=1
      run: ctest --output-on-failure -j 2

  test-linux:
    needs: [sanitize]
    strategy:
      matrix:
        os: [ubuntu-22.04]

        type: [shared, static]

        include:
        - { type: shared, shared: YES }
        - { type: static, shared: NO }

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    - name: Install GoogleTest libraries
      uses: MarkusJx/googletest-installer@v1.1.1

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-22.04'
      run: >-
        sudo apt-get install clang-tidy-14 cppcheck -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-14 140

    - name: Install werkzeugkiste requirements
      uses: jrl-umi3218/github-actions/install-dependencies@master
      with:
        ubuntu: |
          apt: libeigen3-dev libconfig++-dev
        macos: |
          brew: eigen
        windows: |
          github:
          - path: eigenteam/eigen-git-mirror
            ref: 3.3.7

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"
        -D BUILD_SHARED_LIBS=${{ matrix.shared }} -D BUILD_TESTING=NO -D BUILD_EXAMPLES=YES

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: build
      if: matrix.os == 'ubuntu-22.04'
      run: ctest --output-on-failure -C Release -j 2

  build-others:
    needs: [test-linux]
    strategy:
      matrix:
        os: [macos-12]
#        os: [macos-12, windows-2022]

        type: [shared, static]

        include:
        - { type: shared, shared: YES }
        - { type: static, shared: NO }

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v3

    # - name: Install static analyzers
    #   if: matrix.os == 'ubuntu-22.04'
    #   run: >-
    #     sudo apt-get install clang-tidy-14 cppcheck -y -q

    #     sudo update-alternatives --install
    #     /usr/bin/clang-tidy clang-tidy
    #     /usr/bin/clang-tidy-14 140

    - name: Install werkzeugkiste requirements
      uses: jrl-umi3218/github-actions/install-dependencies@master
      with:
        ubuntu: |
          apt: libeigen3-dev
        macos: |
          brew: eigen
        windows: |
          github:
          - path: eigenteam/eigen-git-mirror
            ref: 3.3.7

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"
        -D BUILD_SHARED_LIBS=${{ matrix.shared }}
        -D BUILD_TESTING=NO
        -D BUILD_EXAMPLES=YES

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

  docs:
    needs: [sanitize, test-linux]

    runs-on: ubuntu-22.04

    permissions:
      contents: write

    # To enable, first you have to create an orphaned gh-pages branch:
    #
    #    git switch --orphan gh-pages
    #    git commit --allow-empty -m "Initial commit"
    #    git push -u origin gh-pages
    #
    # Edit the <name> placeholder below to your GitHub name, so this action
    # runs only in your repository and no one else's fork. After these, delete
    # this comment and the last line in the conditional below.
    # If you do not wish to use GitHub Pages for deploying documentation, then
    # simply delete this job similarly to the coverage one.
    if: github.ref == 'refs/heads/main'
      && github.event_name == 'push'
      && github.repository_owner == 'snototter'

    steps:
    - uses: actions/checkout@v3

    - uses: actions/setup-python@v4
      with: { python-version: "3.8" }

    - name: Install m.css dependencies
      run: pip3 install jinja2 Pygments

    - name: Install Doxygen
      run: sudo apt-get update -q
        && sudo apt-get install doxygen -q -y

    - name: Build docs
      run: cmake "-DPROJECT_SOURCE_DIR=$PWD" "-DPROJECT_BINARY_DIR=$PWD/build"
        -P cmake/docs-ci.cmake

    - name: Deploy docs
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: build/docs/html
